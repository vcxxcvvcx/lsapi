# 종목명, 종목코드, 현재가(원), 등락률(%), 거래대금, 상장주식수, 총매도잔량, 총매수잔량 
# 중 총매도잔량 총매수잔량만 하면됨 - 아마 키움 api사용해야할듯 

import asyncio
import pymysql
from datetime import datetime
from ebest import OpenApi
from app_keys import appkey, appsecretkey
from pykrx.stock import get_market_cap_by_ticker

# 오늘 날짜 (yyyymmdd)
today = datetime.today().strftime("%Y%m%d")

# 🔁 PyKRX 마켓캡 데이터 전역 로딩 (한 번만)
try:
    df_market_cap = get_market_cap_by_ticker(today)
except Exception as e:
    print(f"❌ pykrx 마켓캡 로딩 실패: {e}")
    df_market_cap = None

# MySQL 접속 설정
MYSQL_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': '5737',
    'database': 'stock_data',
    'charset': 'utf8mb4'
}

# 안전한 정수 변환
def safe_int(value):
    try:
        return int(str(value).replace(',', '').strip())
    except:
        return 0

# 🛠 PyKRX에서 상장주식수 보완 함수
def get_fallback_listed_shares(shcode):
    try:
        code = shcode.zfill(6)
        if df_market_cap is not None and code in df_market_cap.index:
            return int(df_market_cap.loc[code]['상장주식수'])
    except Exception as e:
        print(f"⚠️ pykrx에서 {shcode} 조회 실패: {e}")
    return 0

# ✅ MySQL에 저장
def save_snapshot(data1102, data3320, hname):
    try:
        total_offer = sum(safe_int(data1102.get(f"offerrem{i}", 0)) for i in range(1, 11))
        total_bid = sum(safe_int(data1102.get(f"bidrem{i}", 0)) for i in range(1, 11))

        listed_shares = safe_int(data3320.get('gstock'))
        if listed_shares == 0:
            listed_shares = get_fallback_listed_shares(data1102.get('shcode'))

        with pymysql.connect(**MYSQL_CONFIG) as conn:
            with conn.cursor() as cur:
                sql = """
                INSERT INTO stock_snapshot (
                    shcode, hname, price, change_pct, amount,
                    listed_shares, total_offer_qty, total_bid_qty, created_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                """
                cur.execute(sql, (
                    data1102.get('shcode'),
                    hname,
                    safe_int(data1102.get('price')),
                    float(data1102.get('diff', 0)),
                    safe_int(data1102.get('value')),
                    listed_shares,
                    total_offer,
                    total_bid,
                    datetime.now()
                ))
            conn.commit()
        print(f"✅ 저장 완료: {hname}")
    except Exception as e:
        print(f"❌ 저장 실패 ({data1102.get('shcode')}): {e}")

# 종목 1개 처리
async def fetch_one(api, stock):
    shcode = stock['shcode']
    hname = stock['hname']

    try:
        res1102 = await api.request('t1102', { 't1102InBlock': { 'shcode': shcode } })
        await asyncio.sleep(1)

        res3320 = await api.request('t3320', { 't3320InBlock': { 'gicode': 'A' + shcode } })
        await asyncio.sleep(1)

        if res1102 and res3320:
            data1102 = res1102.body.get('t1102OutBlock', {})
            data3320 = res3320.body.get('t3320OutBlock', {})
            save_snapshot(data1102, data3320, hname)
        else:
            if not res1102:
                print(f"❌ t1102 실패: {shcode} - {api.last_message}")
            if not res3320:
                print(f"❌ t3320 실패: {shcode} - {api.last_message}")
    except Exception as e:
        print(f"❌ 예외 발생 ({shcode}): {e}")

# 전체 종목 반복 처리
async def fetch_all():
    api = OpenApi()
    await api.login(appkey, appsecretkey)

    res = await api.request('t8436', {'t8436InBlock': {'gubun': '1'}})  # 1: 코스피만
    if not res:
        print("❌ 종목 리스트 요청 실패")
        return

    stock_list = res.body['t8436OutBlock']
    for stock in stock_list:
        await fetch_one(api, stock)

    await api.close()
    print("✅ 전체 저장 완료")

if __name__ == '__main__':
    asyncio.run(fetch_all())

